file.c:    if(f->ip->size + off < 0)
file.c:    f->off = f->ip->size + off;
fs.c:// not stored on disk: ip->ref and ip->valid.
fs.c://   is free if ip->ref is zero. Otherwise ip->ref tracks
fs.c://   table entry is only correct when ip->valid is 1.
fs.c://   the disk and sets ip->valid, while iput() clears
fs.c://   ip->valid if ip->ref has fallen to zero.
fs.c://   ... examine and modify ip->xxx ...
fs.c:// pathname lookup. iget() increments ip->ref so that the inode
fs.c:// entries. Since ip->ref indicates whether an entry is free,
fs.c:// and ip->dev and ip->inum indicate which i-node an entry
fs.c:// An ip->lock sleep-lock protects all ip-> fields other than ref,
fs.c:// dev, and inum.  One must hold ip->lock in order to
fs.c:// read or write that inode's ip->valid, ip->size, ip->type, &c.
fs.c:    if(dip->type == 0){  // a free inode
fs.c:      dip->type = type;
fs.c:// Must be called after every change to an ip->xxx field
fs.c:// Caller must hold ip->lock.
fs.c:  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
fs.c:  dip = (struct dinode*)bp->data + ip->inum%IPB;
fs.c:  dip->type = ip->type;
fs.c:  dip->major = ip->major;
fs.c:  dip->minor = ip->minor;
fs.c:  dip->nlink = ip->nlink;
fs.c:  dip->size = ip->size;
fs.c:  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
fs.c:    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
fs.c:      ip->ref++;
fs.c:    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
fs.c:  ip->dev = dev;
fs.c:  ip->inum = inum;
fs.c:  ip->ref = 1;
fs.c:  ip->valid = 0;
fs.c:  ip->ref++;
fs.c:  if(ip == 0 || ip->ref < 1)
fs.c:  acquiresleep(&ip->lock);
fs.c:  if(ip->valid == 0){
fs.c:    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
fs.c:    dip = (struct dinode*)bp->data + ip->inum%IPB;
fs.c:    ip->type = dip->type;
fs.c:    ip->major = dip->major;
fs.c:    ip->minor = dip->minor;
fs.c:    ip->nlink = dip->nlink;
fs.c:    ip->size = dip->size;
fs.c:    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
fs.c:    ip->valid = 1;
fs.c:    if(ip->type == 0)
fs.c:  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
fs.c:  releasesleep(&ip->lock);
fs.c:  if(ip->ref == 1 && ip->valid && ip->nlink == 0){
fs.c:    // ip->ref == 1 means no other process can have ip locked,
fs.c:    acquiresleep(&ip->lock);
fs.c:    ip->type = 0;
fs.c:    ip->valid = 0;
fs.c:    releasesleep(&ip->lock);
fs.c:  ip->ref--;
fs.c:// are listed in ip->addrs[].  The next NINDIRECT blocks are
fs.c:// listed in block ip->addrs[NDIRECT].
fs.c:    if((addr = ip->addrs[bn]) == 0)
fs.c:      ip->addrs[bn] = addr = balloc(ip->dev);
fs.c:    if((addr = ip->addrs[NDIRECT]) == 0)
fs.c:      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
fs.c:    bp1 = bread(ip->dev, addr);
fs.c:      addr1 = balloc(ip->dev);
fs.c:    bp2 = bread(ip->dev, addr1);
fs.c:      addr2 = balloc(ip->dev);
fs.c:// Caller must hold ip->lock.
fs.c:    if(ip->addrs[i]){
fs.c:      bfree(ip->dev, ip->addrs[i]);
fs.c:      ip->addrs[i] = 0;
fs.c:  if(ip->addrs[NDIRECT]){
fs.c:    bp1 = bread(ip->dev, ip->addrs[NDIRECT]);
fs.c:        bp2 = bread(ip->dev, a1[j]);
fs.c:            bfree(ip->dev, a2[l]);
fs.c:        bfree(ip->dev, a1[j]);
fs.c:    bfree(ip->dev, ip->addrs[NDIRECT]);
fs.c:    ip->addrs[NDIRECT] = 0;
fs.c:  ip->size = 0;
fs.c:// Caller must hold ip->lock.
fs.c:  st->dev = ip->dev;
fs.c:  st->ino = ip->inum;
fs.c:  st->type = ip->type;
fs.c:  st->nlink = ip->nlink;
fs.c:  st->size = ip->size;
fs.c:// Caller must hold ip->lock.
fs.c:  if(off > ip->size || off + n < off)
fs.c:  if(off + n > ip->size)
fs.c:    n = ip->size - off;
fs.c:    bp = bread(ip->dev, bmap(ip, off/BSIZE));
fs.c:// Caller must hold ip->lock.
fs.c:  if(off > ip->size || off + n < off)
fs.c:    bp = bread(ip->dev, bmap(ip, off/BSIZE));
fs.c:  if(off > ip->size)
fs.c:    ip->size = off;
fs.c:  // block to ip->addrs[].
fs.c:    if(ip->type != T_DIR){
sysfile.c:  if(ip->type == T_DIR){
sysfile.c:  ip->nlink++;
sysfile.c:  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
sysfile.c:  ip->nlink--;
sysfile.c:  if(ip->nlink < 1)
sysfile.c:  if(ip->type == T_DIR && !isdirempty(ip)){
sysfile.c:  if(ip->type == T_DIR){
sysfile.c:  ip->nlink--;
sysfile.c:    if(type == T_FILE && (ip->type == T_FILE || ip->type == T_DEVICE))
sysfile.c:  ip->major = major;
sysfile.c:  ip->minor = minor;
sysfile.c:  ip->nlink = 1;
sysfile.c:    // No ip->nlink++ for ".": avoid cyclic ref count.
sysfile.c:    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
sysfile.c:  if(dirlink(dp, name, ip->inum) < 0)
sysfile.c:    if(ip->type == T_DIR && omode != O_RDONLY){
sysfile.c:  if(ip->type == T_DEVICE && (ip->major < 0 || ip->major >= NDEV)){
sysfile.c:  if(ip->type == T_DEVICE){
sysfile.c:    f->major = ip->major;
sysfile.c:      f->off = ip->size;
sysfile.c:  if((omode & O_TRUNC) && ip->type == T_FILE){
sysfile.c:  if(ip->type != T_DIR){
kernel.asm:    if((addr = ip->addrs[bn]) == 0)
kernel.asm:      ip->addrs[bn] = addr = balloc(ip->dev);
kernel.asm:    if((addr = ip->addrs[NDIRECT]) == 0)
kernel.asm:      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
kernel.asm:    bp1 = bread(ip->dev, addr);
kernel.asm:      addr1 = balloc(ip->dev);
kernel.asm:    bp2 = bread(ip->dev, addr1);
kernel.asm:      addr2 = balloc(ip->dev);
kernel.asm:    if((addr = ip->addrs[bn]) == 0)
kernel.asm:      ip->addrs[bn] = addr = balloc(ip->dev);
kernel.asm:      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
kernel.asm:      addr1 = balloc(ip->dev);
kernel.asm:      addr2 = balloc(ip->dev);
kernel.asm:    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
kernel.asm:    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
kernel.asm:      ip->ref++;
kernel.asm:    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
kernel.asm:  ip->dev = dev;
kernel.asm:  ip->inum = inum;
kernel.asm:  ip->ref = 1;
kernel.asm:  ip->valid = 0;
kernel.asm:    if(dip->type == 0){  // a free inode
kernel.asm:      dip->type = type;
kernel.asm:  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
kernel.asm:  dip = (struct dinode*)bp->data + ip->inum%IPB;
kernel.asm:  dip->type = ip->type;
kernel.asm:  dip->major = ip->major;
kernel.asm:  dip->minor = ip->minor;
kernel.asm:  dip->nlink = ip->nlink;
kernel.asm:  dip->size = ip->size;
kernel.asm:  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
kernel.asm:  ip->ref++;
kernel.asm:  if(ip == 0 || ip->ref < 1)
kernel.asm:  acquiresleep(&ip->lock);
kernel.asm:  if(ip->valid == 0){
kernel.asm:    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
kernel.asm:    dip = (struct dinode*)bp->data + ip->inum%IPB;
kernel.asm:    ip->type = dip->type;
kernel.asm:    ip->major = dip->major;
kernel.asm:    ip->minor = dip->minor;
kernel.asm:    ip->nlink = dip->nlink;
kernel.asm:    ip->size = dip->size;
kernel.asm:    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
kernel.asm:    ip->valid = 1;
kernel.asm:    if(ip->type == 0)
kernel.asm:  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
kernel.asm:  releasesleep(&ip->lock);
kernel.asm:// Caller must hold ip->lock.
kernel.asm:    if(ip->addrs[i]){
kernel.asm:      bfree(ip->dev, ip->addrs[i]);
kernel.asm:      ip->addrs[i] = 0;
kernel.asm:  if(ip->addrs[NDIRECT]){
kernel.asm:    bfree(ip->dev, ip->addrs[NDIRECT]);
kernel.asm:    ip->addrs[NDIRECT] = 0;
kernel.asm:  ip->size = 0;
kernel.asm:    bp1 = bread(ip->dev, ip->addrs[NDIRECT]);
kernel.asm:            bfree(ip->dev, a2[l]);
kernel.asm:        bfree(ip->dev, a1[j]);
kernel.asm:        bp2 = bread(ip->dev, a1[j]);
kernel.asm:    bfree(ip->dev, ip->addrs[NDIRECT]);
kernel.asm:    ip->addrs[NDIRECT] = 0;
kernel.asm:  if(ip->ref == 1 && ip->valid && ip->nlink == 0){
kernel.asm:  ip->ref--;
kernel.asm:  if(ip->ref == 1 && ip->valid && ip->nlink == 0){
kernel.asm:    acquiresleep(&ip->lock);
kernel.asm:    ip->type = 0;
kernel.asm:    ip->valid = 0;
kernel.asm:    releasesleep(&ip->lock);
kernel.asm:// Caller must hold ip->lock.
kernel.asm:  st->dev = ip->dev;
kernel.asm:  st->ino = ip->inum;
kernel.asm:  st->type = ip->type;
kernel.asm:  st->nlink = ip->nlink;
kernel.asm:  st->size = ip->size;
kernel.asm:  if(off > ip->size || off + n < off)
kernel.asm:  if(off > ip->size || off + n < off)
kernel.asm:  if(off > ip->size || off + n < off)
kernel.asm:  if(off + n > ip->size)
kernel.asm:    n = ip->size - off;
kernel.asm:    bp = bread(ip->dev, bmap(ip, off/BSIZE));
kernel.asm:    bp = bread(ip->dev, bmap(ip, off/BSIZE));
kernel.asm:  if(off > ip->size || off + n < off)
kernel.asm:  if(off > ip->size || off + n < off)
kernel.asm:    bp = bread(ip->dev, bmap(ip, off/BSIZE));
kernel.asm:    bp = bread(ip->dev, bmap(ip, off/BSIZE));
kernel.asm:  if(off > ip->size)
kernel.asm:    ip->size = off;
kernel.asm:  // block to ip->addrs[].
kernel.asm:    if(ip->type != T_DIR){
kernel.asm:    if(ip->type != T_DIR){
kernel.asm:    f->off = f->ip->size + off;
kernel.asm:    f->off = f->ip->size + off;
kernel.asm:    if(type == T_FILE && (ip->type == T_FILE || ip->type == T_DEVICE))
kernel.asm:  ip->major = major;
kernel.asm:  ip->minor = minor;
kernel.asm:  ip->nlink = 1;
kernel.asm:  if(dirlink(dp, name, ip->inum) < 0)
kernel.asm:    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
kernel.asm:  if(ip->type == T_DIR){
kernel.asm:  ip->nlink++;
kernel.asm:  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
kernel.asm:  ip->nlink--;
kernel.asm:  if(ip->nlink < 1)
kernel.asm:  if(ip->type == T_DIR && !isdirempty(ip)){
kernel.asm:  if(ip->type == T_DIR){
kernel.asm:  ip->nlink--;
kernel.asm:  if(ip->type == T_DEVICE && (ip->major < 0 || ip->major >= NDEV)){
kernel.asm:  if(ip->type == T_DEVICE){
kernel.asm:    f->major = ip->major;
kernel.asm:      f->off = ip->size;
kernel.asm:    if(ip->type == T_DIR && omode != O_RDONLY){
kernel.asm:    f->major = ip->major;
kernel.asm:  if((omode & O_TRUNC) && ip->type == T_FILE){
kernel.asm:  if(ip->type != T_DIR){
